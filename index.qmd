---
title: '`glitter` makes SPARQL'
subtitle: '`glitter`, un package R pour explorer et collecter des données du web sémantique'
author: "Lise Vaudor, Maëlle Salmon"
institute: "MeetUp Rladies, 14 novembre 2023"
date: "21/06/2023"
format: 
  revealjs:
    auto-stretch: false
    embed-resources: true
    df-print: kable
    scrollable: true
    logo: img/logo_small.png
    css:
     styles.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(glitter)
library(tidyverse)
library(kableExtra)
library(stringr)
 show=function(dt){
   dt %>% 
     as.data.frame() %>% 
     kable() %>% 
     kable_styling(bootstrap_options = c("hover","condensed"),
                 full_width = F,
                 position = "float_left",
                 font_size = 10)
   }
```

## Projet RECIT

![](img/im_Rladies_mem_1.jpg){width="1200px"}

-   **Analyste de données** dans un labo de géographie (UMR 5600 Environnement Ville Société)

-   Rôle **pédagogique**: aider les collègues à **utiliser R** pour leurs analyses/valorisation (blog[🔗](http://perso.ens-lyon.fr/lise.vaudor/))

-   Travail d'**appui à la recherche** ➡ développement d'outils d'analyse, recueil de données du web (API, web-scraping...)

## Projet RECIT

![](img/im_Rladies_mem_1.jpg){width="1200px"}

-   Intérêt pour les **données du web** (réseaux sociaux, projet Wikimedia)

-   Découverte du **web des données** (LOD: Linked Open Data) via les Wikidata

## Projet RECIT

![](img/im_Rladies_mem_2.jpg){width="1200px"}

**Projet émergent ENS: RECIT**:

**R** pour l'**E**xploration et la **C**ollecte **I**ntégrée de **T**riplets de données

➡️ 💰 20 000 euros sur 4 ans

## Projet RECIT

<div>

![](img/im_Rladies_mem_3.jpg){width="1200px"}

</div>

Stage M2 **Camille Scheffler** et exploration des Wikidata pour deux cas d'études:

-   Les **jumelages** en Europe et dans le monde (Camille Scheffler, Ninon Briot, ATER ENS de Lyon)
-   Le [**lobbyisme** aux USA](http://geoconfluences.ens-lyon.fr/informations-scientifiques/a-la-une/carte-a-la-une/lieux-de-pouvoir-lobbying-etats-unis) (Camille Scheffler, Florence Nussbaum, MCF ENS de Lyon)

## Web sémantique, linked open data, web des données

![© Camille Scheffler](img/web_des_donnees_cscheffler.png){width="1400px"}

## Web sémantique et Linked Open Data

💡 **Web sémantique** Vision du web dans laquelle les données sont structurées et organisées pour être traitables par des machines ➡ lien étroit aux principes FAIR (Findable Accessible Interoperable Reusable)

🧱️ **Linked Open Data**: Une réalisation concrète de cette vision, consistant en des données interconnectées et accessible sur le web. *Web des données*

## Formalisation des Linked Open Data

![© Camille Scheffler](img/LOD_principes_cscheffler.png){width="1400px"} [exemple: URI correspondant au film "Marius et Jeannette" sur Wikidata](https://www.wikidata.org/wiki/Q3293881)

## Linked Open Data: : LOD-cloud

[🔗](http://cas.lod-cloud.net/clouds/lod-cloud.svg)

![](img/lod-cloud.jpeg){height="600px"}

## Projet RECIT

<div>

![](img/im_Rladies_mem_4.jpg){width="1200px"}

</div>

En lien (et en parallèle) aux cas d'études de Camille, début du **développement du package R `glitter`** en 2021.

## Package glitter: objectifs

![](img/logo_small.png)

🎯 Promouvoir l'usage (exploration, recueil, analyse) des données du web sémantique pour les chercheur·se·s et étudiant·e·s **usagers de R**, en:

-   facilitant l'**écriture** des requêtes SPARQL
-   facilitant l'**envoi** des requêtes
-   favoriser l'analyse/valorisation ultérieure dans R

En tant que "**Domain Specific Language**" (DSL), glitter correspond à une *syntaxe* et des *fonctions* plus proches du tidyverse et base R que de SPARQL.

## Projet RECIT

![](img/im_Rladies_mem_5.jpg){width="1200px"}

2022, 2023: presta de 💪**Maëlle Salmon**

## Projet RECIT

![](img/im_Rladies_mem_6.jpg)

Le projet prend fin: 🎉 {glitter} est prêt à être utilisé!! 🎉

## Linked Open Data: difficultés d'appropriation et de collecte

::: columns
::: {.column width="50%"}
-   👀 ce qu'on appréhende directement: le web documentaire
-   💭 difficultés liées à la structure des données en graphes
-   🔮 métadonnées intégrées aux données
-   🧠️ transformation en données tabulaires pour analyses
-   ⛏️ difficultés de collecte (SPARQL)
:::

::: {.column width="50%"}
![Du graphe de connaissances au tableau de données](img/donnees_en_graphe.png){width="600px"}
:::
:::

## Exemple de requête simple

::: columns
::: {.column width="50%"}
Dans R, sans glitter:

```{r bef_glitter, eval=FALSE}
query <- 'SELECT ?film ?filmLabel WHERE {
?film wdt:P31 wd:Q11424. 
SERVICE wikibase:label{bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en".} } LIMIT 10'

tib <- WikidataQueryServiceR::query_wikidata(query)
```

-   🖊️ Rédaction et envoi de commandes R
-   🎁 Recueil du tableau de résultats en tant qu'objet R
-   🎯 Chaîne de traitement reproductible
:::

::: {.column width="50%"}
Dans R, avec glitter:

```{r glitter_no_SPARQL}
tib <- spq_init() %>%
  spq_add("?film wdt:P31 wd:Q11424") %>%
  spq_label(film) %>% 
  spq_head(n=10) %>% 
  spq_perform() 
```

```{r show_result_init, echo=FALSE}
tib
```
:::
:::

## 

```{r steps, echo=FALSE}
query <- spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_add("?film wdt:P921 ?subject", .required=FALSE) %>%          
  spq_add("?film wdt:P577 ?date") %>%   
  spq_label(film,loc,subject) %>% 
  spq_mutate(year=year(date)) %>%       
  spq_select(-date) 

steps=sequins::plot_query(query,show_step=TRUE, label=TRUE)
```

```{r show_step1, echo=FALSE}
steps[[1]]
```

```{r step1}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424")
```

## 

```{r show_step2, echo=FALSE}
steps[[2]]
```

```{r step2}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc")
```

## 

```{r show_step3, echo=FALSE}
steps[[3]]
```

```{r step3}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") 
```

## 

```{r show_step4, echo=FALSE}
steps[[4]]
```

```{r step4}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") 
```

## 

```{r show_step5, echo=FALSE}
steps[[5]]
```

```{r steps5}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_add("?film wdt:P921 ?subject", .required=FALSE) 
```

## 

```{r, echo=FALSE}
steps[[6]]
```

```{r step6}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_add("?film wdt:P921 ?subject", .required=FALSE) %>%          
  spq_add("?film wdt:P577 ?date") 
```

## 

```{r show_step7, echo=FALSE}
steps[[9]]
```

```{r step7}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_add("?film wdt:P921 ?subject", .required=FALSE) %>%          
  spq_add("?film wdt:P577 ?date") %>%   
  spq_label(film,loc,subject) 
```

## Données enrichies

```{r film_query}
query=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P840 ?loc") %>%            
  spq_add("?loc wdt:P625 ?coords") %>%  
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_add("?film wdt:P921 ?subject", .required=FALSE) %>%          
  spq_add("?film wdt:P577 ?date") %>%   
  spq_label(film,loc,subject) %>% 
  spq_mutate(year=year(date)) %>% 
  spq_group_by(film,film_label,loc,loc_label,coords,image) %>%
  spq_summarise(year=min(year),
                subject_label=str_c(unique(subject_label),sep="; ")) 

df_films=spq_perform(query)
```

Cette table comprend `r nrow(df_films)` lignes (films avec localisation narrative, coordonnées associées et affiche). Voici les premières:

```{r calc_df_films_show, echo=FALSE}
df_films_show <- df_films %>% 
   select(film_label, loc_label,coords, image,subject_label, year) %>% 
   unique() %>% 
   head()
```

```{r df_films_show}
df_films_show
```

## Carte mondiale des lieux de fiction (films avec affiche)

```{r lf_c, echo=FALSE}
lf_c=df_films %>%  # préfixe les uri
  select(film,ends_with("_label"),coords,image,year) %>%  # Sélectionne ces variables (dont "...._label") puis
  group_by(film,coords,image,loc_label,film_label) %>%     # Groupe par ces variables puis 
  summarise(subject_label=paste0(unique(subject_label),    # Résume par groupe: le sujet (sur une seule ligne)   
                                        collapse=", "),  #  ... en séparant les éléments par ", "
            year=min(year),                              #  ... et l'année comme minimum des années de sortie   
            .groups="drop")                              # Dégroupe
```

```{r lf_map, echo=FALSE}
lf_map =lf_c %>%
  #transform_wikidata_coords("coords") %>%
  mutate(popup=glue::glue("<h1>{film_label}</h1>
                           <li>Lieu: {loc_label}</li>
                           <li>Année de sortie: {year}</li>")) %>%
  mutate(popup=case_when(is.na(image)~popup,
                         !is.na(image)~glue::glue("{popup}
                                                  <img src='{image}' height='200'>"))) %>%
  mutate(popup=case_when(is.na(subject_label)~popup,
                         !is.na(subject_label)~glue::glue("{popup}
                                                         <li>Thèmes: {subject_label}</li>"))) %>% 
  sf::st_as_sf(wkt="coords")
```

```{r build_map_film, echo=FALSE}
library(leaflet) 
# Définition d'une échelle colorée 
# (en fonction de date de sortie) 
pal <- colorNumeric(c("red", "green", "blue"), c(1895,1950,1970,1990,2010,2023)) 
# Création de la carte 
map=leaflet(lf_map) %>% # déf carte 
  addTiles() %>% # ajout fond de carte
  addCircleMarkers(col=~pal(year),
                   popup = ~popup,
                   clusterOptions = markerClusterOptions()) 
```

```{r show_map, echo=FALSE}
map 
```

## Package glitter: vue d'ensemble

![](img/tidyverse_logo.jpeg){width="50px"} Un package qui suit quelques principes du tidyverse...

-   usage du **pipe %\>%**
-   fonctions à **préfixe** (ici `spq_`)
-   vise à la **facilité d'utilisation** (décomposition en étapes élémentaires)
-   **évaluation** tidy (référence directe aux noms de variables)
-   attention accordée à la **documentation** (par exemple via des **vignettes**)

## Package glitter: fonctions principales

::: columns
::: {.column width="50%"}
Fonctions de base:

-   spq_init() pour initier une requête
-   spq_add() pour rajouter un motif de triplet
-   spq_perform() pour envoyer la requête
:::

::: {.column width="50%"}
![](img/dplyr_logo.jpeg){width="50px"} Fonctions inspirées de dplyr :

-   spq_filter()
-   spq_select()
-   spq_arrange()
-   spq_mutate()
-   spq_group_by()
-   spq_summarise()

➡️ "Where the magic is" (Maëlle)
:::
:::

## Dimension de la requête?

Combien de films dans Wikidata:

```{r req_glob_lf}
tib <- spq_init() %>%                 
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_summarise(n_films=n()) %>%      # Résume en comptant le nombre de films puis
  spq_perform()                       # Envoie la requête
```

```{r req_glob_lf_show , echo=FALSE}
tib
```

## Dimensionnement des requêtes

::: columns
::: {.column width="50%"}
Temps de réponse du serveur limité par un paramètre de Time out:

-   Wikidata Query Service : 60s
-   client (par ex. glitter): 300s

Pour **film**:

```{r dim_req1}
df=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_summarise(n=n()) %>% 
  spq_perform()
df
```

-   Wikidata Query Service : ❌
-   client (par ex. glitter): ✅️
:::

::: {.column width="50%"}
![](img/taille_requete_1.png)
:::
:::

## Dimensionnement des requêtes

::: columns
::: {.column width="50%"}
Temps de réponse du serveur limité par un paramètre de Time out:

-   Wikidata Query Service : 60s
-   client (par ex. glitter): 300s

Pour **film**, **date**:

```{r dim_req2}
df=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>%  
  spq_add("?film wdt:P577 ?date") %>% 
  spq_summarise(n=n()) %>% 
  spq_perform()
df
```

-   Wikidata Query Service : ❌
-   client (par ex. glitter): ❌️
:::

::: {.column width="50%"}
![](img/taille_requete_2.png)
:::
:::

## Dimensionnement des requêtes

::: columns
::: {.column width="50%"}
Temps de réponse du serveur limité par un paramètre de Time out:

-   Wikidata Query Service : 60s
-   client (par ex. glitter): 300s

Pour **film**, **date**, **image**:

```{r dim_req3}
df=spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P577 ?date") %>% 
  spq_add("?film wdt:P3383 ?image") %>% 
  spq_summarise(n=n()) %>% 
  spq_perform()
df
```

-   Wikidata Query Service : ✅️
-   client (par ex. glitter): ✅️
:::

::: {.column width="50%"}
![](img/taille_requete_3.png)
:::
:::

## Combinaison de requêtes

Si on voulait par exemple récupérer le **genre** de film (comédie, drame, film d'aventure, etc.) et les **acteurs et actrices**:

```{r genre_and_actor}
spq_init() %>%                     
  spq_add("?film wdt:P31 wd:Q11424") %>% 
  spq_add("?film wdt:P136 ?genre") %>%
  spq_add("?film wdt:P161 ?actor",.required=FALSE) %>% 
  spq_tally() %>% 
  spq_perform()
```

## Combinaison de requêtes

```{r combi_queries}
get_genre_and_actors=function(film_id){
  film_id=paste0("<",film_id,">")
  result=spq_init() %>%
      spq_set(film= film_id) %>%
      spq_add("?film wdt:P136 ?genre") %>%
      spq_add("?film wdt:P161 ?actor",.required=FALSE) %>%
      spq_label(genre, actor) %>%
      spq_select(-film) %>%
      spq_perform()
  return(result)
}

tib_genre_actors=df_films %>%
   head() %>% 
   mutate(data=purrr::map(film,get_genre_and_actors)) %>% 
   unnest(cols=data)
```

```{r show_tib_genre_actors}
tib_genre_actors %>%
  select(film_label,genre_label,actor_label)
```

## Généralisation à l'usage d'autres endpoints

![](img/logos_endpoints.png){width="1000px"} Exemple de requête sur le SPARQL endpoint de dbpedia:

```{r dbpedia}
tib <- spq_init("dbpedia") %>%
  spq_add("?person dbo:birthPlace ?place") %>% # ?personne est née à ?place
  spq_add("?person dbo:profession ?job") %>%   # ?personne a pour profession ?job
  spq_add("?job rdfs:label ?job_label") %>%     # ?job a pour étiquette ?job_label
  spq_filter(lang(job_label)=="en") %>%         # Filtre pour ne garder que les étiquettes en anglais
  spq_add("?place rdfs:label 'Lyon'@en") %>%   # ?place a pour étiquette 'Lyon' (en anglais)
  spq_head(10) %>%
  spq_perform()                       # Envoie sur le SPARQL endpoint de DBPEDIA
```

```{r show_dbpedia,  echo=FALSE}
tib
```

## Généralisation à d'autres endpoints: hal

```{r}
query_hal <- spq_init("hal") %>%
  spq_add("?doc dcterms:creator ?createur") %>%
  spq_add("?createur hal:structure ?affiliation") %>%
  spq_add("?createur hal:person ?personne") %>%
  spq_add("?personne foaf:name 'Lise Vaudor'") %>% 
  spq_add("?doc dcterms:type ?type") %>%
  spq_label(type, .languages = "fr") %>%
  spq_add("?doc dcterms:bibliographicCitation ?citation") %>%
  spq_add("?doc dcterms:issued ?date") %>%
  spq_mutate(date = str_sub(as.character(date), 1, 4)) %>%
  spq_group_by(citation, type_label, date) %>%
  spq_summarise(affiliation = str_c(affiliation, sep = ", ")) 

sequins::plot_query(query_hal)
```

```{r query_hal_perform}
docs_lv_hal=query_hal %>%
  spq_perform()
docs_lv_hal
```

## Préfixes usuels

Le package glitter fournit une **liste de préfixes usuels** pour alléger l'écriture de la requête...

```{r show_usual_prefixes }
usual_prefixes
```

## Généralisation: endpoints "usuels"

... et il fournit une liste d'endpoints usuels:

```{r show_usual_endpoints }
usual_endpoints
```

## Utiliser les LOD pour recueillir et compléter des données

Exemples pratiques d'utilisation:

-   🌻 données **botaniques** ➡️ associer une photo et un nom vernaculaire à un nom d'espèce en latin
-   📜 corpus de **communiqués de presse du Ministère de l'Ecologie** ➡️ récupérer le nom du ministre, avec les dates de début et de fin de son mandat.
-   🏙️ lien entre **grandes villes et plaines alluviales** ➡️ récupérer les populations des grandes villes et leurs coordonnées, associer à une rivière
-   🌍 **carte du monde** basée sur un shapefile avec des codes pays ➡️ récupérer les noms de pays, le nom et les coordonnées de leur capitales

➡️ Richesse thématique pour (par exemple) la construction de **jeux de données pédagogiques**

## Et maintenant?

![](img/chantier.png){width="100px"} Chantier fini: on remballe!

📣 Retours utilisateurs bienvenus

![](img/github_logo.png){width="25px"} Package installable et modifiable ici <https://github.com/lvaudor/glitter>.

📄 https://lvaudor.github.io/glitter/

🧠 Cas d'usages: à vous de jouer!

🙏 Merci pour votre attention!

# ANNEXES

## Sequins

https://github.com/lvaudor/sequins

![](img/hex-sequins_small.png)

## Projet: Objectifs

![](img/RECIT.png)
